{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/ContactListItem/ContactListItem.module.css","redux/operations.js","components/ContactForm/ContactForm.js","redux/selectors.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","views/ContactsView.js"],"names":["module","exports","axios","defaults","baseURL","dispatch","fetchContactsRequest","get","then","data","fetchContactsSuccess","catch","error","fetchContactsError","message","name","number","contact","addContactRequest","post","addContactSuccess","addContactError","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","ContactForm","state","handleInputChange","e","currentTarget","value","setState","handleAddContact","preventDefault","props","onSubmit","reset","alert","this","className","styles","form","type","placeholder","onChange","pattern","title","button","Component","connect","operations","getFilter","contacts","filter","getFilteredContacts","createSelector","items","normalizedFilter","toLowerCase","includes","selectors","actions","target","ContactListItem","handleDeleteContact","item","btn","onClick","filteredContacts","list","map","filteredContact","ContactsView","fetchContacts"],"mappings":"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","file":"static/js/contacts-page.50ef0333.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1SQ7h\",\"button\":\"ContactForm_button__7kfTW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2bCMa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactListItem_btn__1KRh4\",\"item\":\"ContactListItem_item__wlTRm\"};","import axios from 'axios';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n} from './actions';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n        .catch(error => dispatch(fetchContactsError(error.message)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n    const contact = { name, number };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error.message)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(deleteContactSuccess(id)))\r\n        .catch(error => dispatch(deleteContactError(error.message)));\r\n};\r\n// eslint-disable-next-line\r\nexport default { fetchContacts, addContact, deleteContact };","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/operations';\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    }\r\n    \r\n    handleInputChange = (e) => {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleAddContact = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.name === '' || this.state.number === '') {\r\n            alert('Please enter data');\r\n            return;\r\n        }\r\n        this.props.onSubmit({ ...this.state });\r\n        this.reset();\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ name: '', number: '' })\r\n    };\r\n\r\n    render() {\r\n        const { name, number } = this.state;\r\n        return (\r\n            <form onSubmit={this.handleAddContact} className={styles.form}>\r\n                <label>\r\n                    <p>Name</p>\r\n                    <input\r\n                        name='name'\r\n                        value={name}\r\n                        type='text'\r\n                        placeholder='Name'\r\n                        onChange={this.handleInputChange}\r\n                        pattern='[a-zA-Z \\u0400-\\u04ff]{3,30}'\r\n                    />\r\n                </label>\r\n                <label>\r\n                    <p>Number</p>\r\n                    <input\r\n                        name='number'\r\n                        value={number}\r\n                        type='tel'\r\n                        placeholder='Number'\r\n                        onChange={this.handleInputChange}\r\n                        pattern='\\d{3}[\\s.-]?\\d{2}[\\s.-]?\\d{2}$'\r\n                        title='Please, use the following format: 111-11-11'\r\n                    />\r\n                </label>\r\n                <button type='submit' className={styles.button}>Add contact</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: ( name, number ) => dispatch(operations.addContact(name, number)),\r\n})\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// const getFilteredContacts = state => {\r\n//     const contacts = getAllContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n\r\n//      return contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// }\r\n\r\n// -----------------MEMOIZE-----------------\r\nconst getFilteredContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n});\r\n// eslint-disable-next-line\r\nexport default { getFilter, getFilteredContacts, };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/actions';\r\nimport selectors from '../../redux/selectors';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <label>\r\n        Find contacts by name\r\n         <br />\r\n        <input type='text' value={value} onChange={onChange} placeholder='Search contacts' />\r\n    </label>);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ value: selectors.getFilter(state), });\r\n\r\nconst mapDispatchToProps = dispatch => ({ onChange: (e) => dispatch(actions.changeFilter(e.target.value)) });\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styles from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({ id, name, number, handleDeleteContact }) => (\r\n  <li key={id} className={styles.item}>\r\n    <span>\r\n      {name}: {number}\r\n    </span>\r\n    <button className={styles.btn} onClick={() => handleDeleteContact(id)}>Delete</button>\r\n  </li>);\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  handleDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/operations';\r\nimport selectors from '../../redux/selectors';\r\nimport styles from './ContactList.module.css';\r\nimport ContactListItem from '../ContactListItem';\r\n\r\nconst ContactList = ({filteredContacts, handleDeleteContact}) => (\r\n    <ul className={styles.list}>\r\n        {\r\n            filteredContacts.map(filteredContact => (\r\n                <ContactListItem\r\n                    key={filteredContact.id}\r\n                    id={filteredContact.id}\r\n                    name={filteredContact.name}\r\n                    number={filteredContact.number}\r\n                    handleDeleteContact={handleDeleteContact}\r\n                />))\r\n        }\r\n    </ul>);\r\n\r\nContactList.propTypes = {\r\n    filteredContacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string,\r\n            name: PropTypes.string,\r\n            number: PropTypes.string\r\n        })\r\n    ).isRequired,\r\n    handleDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n// const getFilteredContacts = (allContacts, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return allContacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filteredContacts: selectors.getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    handleDeleteContact: (id) => dispatch(operations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from '../components/ContactForm';\r\nimport Filter from '../components/Filter';\r\nimport ContactList from '../components/ContactList';\r\nimport operations from '../redux/operations';\r\n\r\nclass ContactsView extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(operations.fetchContacts()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactsView);"],"sourceRoot":""}